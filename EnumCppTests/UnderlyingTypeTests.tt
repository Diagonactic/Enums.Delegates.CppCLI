<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)\x64\Release\Enums.dll" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Runtime" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Diagonactic" #>
<#@ output extension=".cs" #>
using System;
using Diagonactic;
using DiagonacticTests;
using EnumCppTests.Attributes;
using FluentAssertions;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using static Diagonactic.Enums.Flag;
using System.Diagnostics.CodeAnalysis;

namespace EnumCppUnderlyingTypeTests {
	[TestClass]
	public class EnumUnderlyingTests {
	<#=WriteMethod("SByte", "sbyte", (ulong)Enums.Flag.F1)#>
	<#=WriteMethod("Byte", "byte", (ulong)Enums.Flag.F1)#>
	<#=WriteMethod("Int16", "short", (ulong)Enums.Flag.F4)#>
	<#=WriteMethod("UInt16", "ushort", (ulong)Enums.Flag.F5)#>
	<#=WriteMethod("Int32", "int", (ulong)Enums.Flag.F16)#>
	<#=WriteMethod("UInt32", "uint", (ulong)Enums.Flag.F16)#>
	<#=WriteMethod("Int64", "long", (ulong)Enums.Flag.F42)#>
	<#=WriteMethod("UInt64", "ulong", (ulong)Enums.Flag.F59)#>
	}
}
<#+	string GetHex(ulong startingNumber, ulong multiplier)
	{
		ulong newNumber = startingNumber * multiplier;
		return "0x" + newNumber.ToString("X9");
	}
	string WriteMethod(string enumType, string typekw, ulong startingNumber) 
	{
		var flagsType = "Flags" + enumType + "Enum";
	    bool isSigned = typekw == "sbyte" || typekw == "int" || typekw == "long" || typekw == "short";
		string one = startingNumber.ToString("10X");
		return @"
	[TestClass]
	public class Test" + flagsType + @"EnumUnderlyingKind
	{
		[Flags]
		private enum TestEnum : " + typekw + @"	
		{ 
			All = unchecked((" + typekw + ")~0)," + (isSigned ? "\r\n\t\t\tInvalid = -1," : "")+@"			
			Zero = 0,
			One = " + GetHex(startingNumber, (ulong)Enums.Flag.F1) + @",
			Two = " + GetHex(startingNumber, (ulong)Enums.Flag.F2) + @",
			Too = " + GetHex(startingNumber, (ulong)Enums.Flag.F3) + @",
			Eight = " + GetHex(startingNumber, (ulong)Enums.Flag.F4) + @",
			Ten = " + GetHex(startingNumber, (ulong)Enums.Flag.F5) + @",
			" + (isSigned ? ("TenAndTwelve = " + GetHex(startingNumber, (ulong)Enums.Flag.F5 | (ulong)Enums.Flag.F6) + @",") : "") + @"			
		}

		private const TestEnum None            = TestEnum.Zero,
							   Flag1           = TestEnum.One, 
							   Flag2           = TestEnum.Two,
							   Flag4           = TestEnum.Too,
							   Flag8           = TestEnum.Eight,
							   Flag10          = TestEnum.Ten,
							   Flag1Flag2      = TestEnum.One | TestEnum.Two,
							   Flag1Flag2Flag4 = TestEnum.One | TestEnum.Two | TestEnum.Too,
							   AllFlags        = TestEnum.One | TestEnum.Two | TestEnum.Too | TestEnum.Eight | TestEnum.Ten;
		private const string Flag1StringValue = ""One"";
		private const string Flag1StringValueLowerCase = ""one"";
		private const string Flag2StringValue = ""Two"";		
		private const string Flag2Flag10StringValue = ""Two, Ten"";
		private const string Flag2Flag10StringValueLowerCase = ""two, ten"";
		
		[TestMethod, EnumTest]
		public void TestAllDefinedFlags()
		{
			var allFlags = TestEnum.Zero.AddAllDefinedFlags();
			var asNumeric = (" + typekw + @")allFlags;
			allFlags.ShouldBeEquivalentTo(TestEnum.One | TestEnum.Two | TestEnum.Too | TestEnum.Eight | TestEnum.Ten);
			TestEnum.Zero.AddAllDefinedFlags().Should().NotBe(TestEnum.All);

		}

		[TestMethod, EnumTest]
        public void Test" + enumType + @"AsString()
        {
            var flag1NativeToString = Flag1.ToString();
            var flag2NativeToString = Flag2.ToString();
			Flag1.AsString().ShouldBeEquivalentTo(flag1NativeToString);
			Flag2.AsString().ShouldBeEquivalentTo(flag2NativeToString);
			AllFlags.AsString().ShouldBeEquivalentTo(AllFlags.ToString());
			(Flag2 | Flag10).ShouldBeEquivalentTo(Flag2Flag10StringValue);
			(TestEnum.Zero | Flag1).AsString().ShouldBeEquivalentTo((TestEnum.Zero | Flag1).ToString());			
		}

		[TestMethod, EnumTest]
        public void Test" + enumType + @"RemoveFlag()
		{
            Flag1Flag2.RemoveFlag(Flag1).ShouldBeEquivalentTo(Flag2);
			Flag1Flag2.RemoveFlag(Flag2).ShouldBeEquivalentTo(Flag1);
			Flag1Flag2.RemoveFlag(None).ShouldBeEquivalentTo(Flag1Flag2);
		}

		[TestMethod, EnumTest]
        public void Test" + enumType + @"RemoveFlagIf()
		{
			Flag1Flag2.RemoveFlagIf(Flag2, false).ShouldBeEquivalentTo(Flag1Flag2);
			Flag1Flag2.RemoveFlagIf(Flag1, true).ShouldBeEquivalentTo(Flag2);
			Flag1Flag2.RemoveFlagIf(Flag2, () => false).ShouldBeEquivalentTo(Flag1Flag2);
			Flag1Flag2.RemoveFlagIf(Flag2, () => true).ShouldBeEquivalentTo(Flag1);
			Flag1Flag2.RemoveFlagIf(Flag2, s => s == TestEnum.One).ShouldBeEquivalentTo(Flag1Flag2); // false
			Flag1Flag2.RemoveFlagIf(Flag2, s => s.IsFlagSet(TestEnum.One)).ShouldBeEquivalentTo(Flag1); // true
		}

		[TestMethod, EnumTest]
        public void Test" + enumType + @"ModifyFlag()
		{
			Flag1Flag2.ModifyFlag(Flag4, false).ShouldBeEquivalentTo(Flag1Flag2);
			Flag1Flag2.ModifyFlag(Flag2, false).ShouldBeEquivalentTo(Flag1);
			Flag1Flag2.ModifyFlag(Flag4, true).ShouldBeEquivalentTo(Flag1Flag2Flag4);
			Flag1Flag2.ModifyFlag(Flag4, () => true).ShouldBeEquivalentTo(Flag1Flag2Flag4);
			Flag1Flag2.ModifyFlag(Flag4, () => false).ShouldBeEquivalentTo(Flag1Flag2);
			Flag1Flag2.ModifyFlag(Flag4, s => s.IsFlagSet(Flag1)).ShouldBeEquivalentTo(Flag1Flag2Flag4);
			Flag1Flag2.ModifyFlag(Flag4, s => !s.IsFlagSet(Flag1)).ShouldBeEquivalentTo(Flag1Flag2);
		}

		[TestMethod, EnumTest]
        public void Test" + enumType + @"ToList()
		{
            var result = Flag1Flag2.ToList();
			result[0].ShouldBeEquivalentTo(Flag1);
			result[1].ShouldBeEquivalentTo(Flag2);
			result.Count.ShouldBeEquivalentTo(2);
		}

		[TestMethod, EnumTest]
        public void Test" + enumType + @"AreAllFlagsSet()
		{
			Flag1Flag2.AreAllFlagsSet(Flag1, Flag2).Should().BeTrue();
			Flag1Flag2.AreAllFlagsSet(Flag1, Flag2, Flag4).Should().BeFalse();
			None.AreAllFlagsSet(Flag1, Flag2).Should().BeFalse();
			None.AreAllFlagsSet(None).Should().BeTrue();
		}

		[TestMethod, EnumTest]
        public void Test" + enumType + @"AreAnyFlagsSet()
		{
            Flag1Flag2.AreAnyFlagsSet(Flag1).Should().BeTrue();
			Flag1Flag2.AreAnyFlagsSet(Flag4).Should().BeFalse();
			Flag1Flag2.AreAnyFlagsSet(Flag1, Flag4).Should().BeTrue();
			Flag1Flag2.AreAnyFlagsSet(None, Flag1).Should().BeTrue();
			None.AreAnyFlagsSet(None, Flag1).Should().BeTrue();
			None.AreAnyFlagsSet(Flag1, Flag2).Should().BeFalse();
		}

		[TestMethod, EnumTest]
        public void Test" + enumType + @"EqualsAny()
		{
            Flag1Flag2.EqualsAny(Flag1).Should().BeFalse();
			Flag1.EqualsAny(Flag1, Flag2, Flag4).Should().BeTrue();
			Flag1.EqualsAny(Flag2, Flag4).Should().BeFalse();
		}

		[TestMethod, EnumTest]
        public void Test" + enumType + @"AddFlag()
        {
			None.AddFlag(Flag1).ShouldBeEquivalentTo(Flag1);
            Flag1.AddFlag(Flag2).ShouldBeEquivalentTo(Flag1Flag2);
			Flag1.AddFlag(None).ShouldBeEquivalentTo(Flag1);
			Flag1.AddFlag(Flag1).ShouldBeEquivalentTo(Flag1);
			Flag1Flag2.AddFlag(Flag1Flag2).ShouldBeEquivalentTo(Flag1Flag2);
		}

		[TestMethod, EnumTest]
        public void Test" + enumType + @"AddFlagIf()
        {
			None.AddFlagIf(Flag1, true).ShouldBeEquivalentTo(Flag1);
			
			Flag1.AddFlagIf(Flag2, false).ShouldBeEquivalentTo(Flag1);
			Flag2.AddFlagIf(Flag1, true).ShouldBeEquivalentTo(Flag1Flag2);
			Flag2.AddFlagIf(Flag1, () => true).ShouldBeEquivalentTo(Flag1Flag2);
			Flag1.AddFlagIf(Flag2, () => false).ShouldBeEquivalentTo(Flag1);
			Flag2.AddFlagIf(Flag1, s => TestEnum.Two == s).ShouldBeEquivalentTo(Flag1Flag2);
			Flag1.AddFlagIf(Flag2, s => TestEnum.One != s).ShouldBeEquivalentTo(Flag1);
		}

		[TestMethod, EnumTest]
		public void Test" + enumType + @"AddFlags()
		{
			None.AddFlags(Flag1, Flag2).ShouldBeEquivalentTo(Flag1Flag2);			
			Flag1Flag2.AddFlags(Flag1, Flag2).ShouldBeEquivalentTo(Flag1Flag2);
			Flag1Flag2.AddFlags(None).ShouldBeEquivalentTo(Flag1Flag2);
			var result = Flag1.AddFlags(Flag2, Flag4, Flag8, Flag10);
            result.ShouldBeEquivalentTo(AllFlags);
		}

		[TestMethod, EnumTest]
		public void Test" + enumType + @"RemoveFlags()
		{
			None.RemoveFlags(Flag1, Flag2).ShouldBeEquivalentTo(None);
            AllFlags.RemoveFlags(Flag1, Flag2, Flag4, Flag8).ShouldBeEquivalentTo(Flag10);
		}
		
		[TestMethod, EnumTest]
		public void Test" + enumType + @"IsFlagSet()
		{
			None.IsFlagSet(Flag1).ShouldBeEquivalentTo(None.HasFlag(Flag1));
			None.IsFlagSet(None).ShouldBeEquivalentTo(None.HasFlag(None));
			Flag1Flag2.IsFlagSet(Flag1).Should().BeTrue();
            Flag1Flag2.IsFlagSet(Flag4).Should().BeFalse();
		}

		[TestMethod, EnumTest]
		public void Test" + enumType + @"TryParseBadValue()
		{
			TestEnum result;
			Enums.TryParse(""foo"", out result).ShouldBeEquivalentTo(false);
			Enums.TryParse(""One, foo"", out result).ShouldBeEquivalentTo(false); 
		}
		
		[TestMethod, EnumTest, SuppressMessage(""ReSharper"", ""ExceptionNotDocumented"")]
		public void Test" + enumType + @"ParseOneValue()
		{				
			Enums.Parse<TestEnum>(Flag1StringValue).ShouldBeEquivalentTo((TestEnum)Enum.Parse(typeof(TestEnum), Flag1StringValue));
            Enums.Parse<TestEnum>(Flag2StringValue).ShouldBeEquivalentTo((TestEnum)Enum.Parse(typeof(TestEnum), Flag2StringValue)); 			           
		}

		[TestMethod, EnumTest, SuppressMessage(""ReSharper"", ""ExceptionNotDocumented"")]
		public void Test" + enumType + @"ParseCaseInsensitiveValue()
		{				
			Enums.Parse<TestEnum>(Flag2Flag10StringValueLowerCase, true).ShouldBeEquivalentTo((TestEnum)Enum.Parse(typeof(TestEnum), Flag2Flag10StringValueLowerCase, true));
            Enums.Parse<TestEnum>(Flag1StringValueLowerCase, true).ShouldBeEquivalentTo((TestEnum)Enum.Parse(typeof(TestEnum), Flag1StringValueLowerCase, true)); 			           
		}

		[TestMethod, EnumTest, SuppressMessage(""ReSharper"", ""ExceptionNotDocumented"")]
		public void Test" + enumType + @"TryParseOneValue()
		{
			TestEnum result;	
			Enums.TryParse(Flag1StringValue, out result).ShouldBeEquivalentTo(true);
			result.ShouldBeEquivalentTo((TestEnum)Enum.Parse(typeof(TestEnum), Flag1StringValue));
            Enums.TryParse(Flag2StringValue, out result).ShouldBeEquivalentTo(true);
			result.ShouldBeEquivalentTo((TestEnum)Enum.Parse(typeof(TestEnum), Flag2StringValue));
		}

		[TestMethod, EnumTest, SuppressMessage(""ReSharper"", ""ExceptionNotDocumented"")]
		public void Test" + enumType + @"ParseMultipleValues()
		{			
			Enums.Parse<TestEnum>($""{Flag1}, {Flag2}"").ShouldBeEquivalentTo((TestEnum)Enum.Parse(typeof(TestEnum), $""{Flag1}, {Flag2}""));
            Enums.Parse<TestEnum>($""{Flag2}, {Flag1}"").ShouldBeEquivalentTo((TestEnum)Enum.Parse(typeof(TestEnum), $""{Flag2}, {Flag1}""));
		}

		[TestMethod, EnumTest]
		public void Test" + enumType + @"ToEnum()
		{
			Enums.ToEnum<TestEnum>((" + typekw + @")" + GetHex(startingNumber, 0) + @").ShouldBeEquivalentTo(None);
			Enums.ToEnum<TestEnum>((" + typekw + @")" + GetHex(startingNumber, 1) + @").ShouldBeEquivalentTo(Flag1);
			Enums.ToEnum<TestEnum>((" + typekw + @")" + GetHex(startingNumber, 1) + " | " + GetHex(startingNumber, 2) + @").ShouldBeEquivalentTo(Flag1Flag2);
			Enums.ToEnum<TestEnum>((Object)" + GetHex(startingNumber, 1) + @").ShouldBeEquivalentTo(Flag1);
			var enumTest1 = (" + typekw + @")" + GetHex(startingNumber, 0) + @";
			var enumTest2 = (" + typekw + @")" + GetHex(startingNumber, 1) + @";
			var enumTest3 = ((" + typekw + @")" + GetHex(startingNumber, 1) + " | " + GetHex(startingNumber, 2) + @");
			Enums.ToEnum<TestEnum>(enumTest1).ShouldBeEquivalentTo((TestEnum)Enum.ToObject(typeof(TestEnum), enumTest1));
			Enums.ToEnum<TestEnum>(enumTest2).ShouldBeEquivalentTo((TestEnum)Enum.ToObject(typeof(TestEnum), enumTest2));
			Enums.ToEnum<TestEnum>(enumTest3).ShouldBeEquivalentTo((TestEnum)Enum.ToObject(typeof(TestEnum), enumTest3));
		}

		[TestMethod, EnumTest]
		public void Test" + enumType + @"ToAsObject()
		{
			None.AsObject().ShouldBeEquivalentTo(None);
			Flag1.AsObject().ShouldBeEquivalentTo(Flag1);
			Flag1Flag2.AsObject().ShouldBeEquivalentTo((Flag1 | Flag2));
			var objResult = Enums.AsObject<TestEnum>((" + typekw +@")(" + GetHex(startingNumber, 1) + " | " + GetHex(startingNumber, 2) + @")) as TestEnum? ?? TestEnum.Ten;
			objResult.ShouldBeEquivalentTo(Flag1 | Flag2);
        }

		[TestMethod, EnumTest]
		public void Test" + enumType + @"Convert()
		{
			var value = TestEnum.Two | TestEnum.Eight;
            var vc = new FlagsToBooleanValueConverter<TestEnum>();
            vc.Convert(value, typeof(TestEnum), TestEnum.Eight, null).ShouldBeEquivalentTo(true);
            vc.Convert(value, typeof(TestEnum), TestEnum.Two, null).ShouldBeEquivalentTo(true);
            vc.Convert(value, typeof(TestEnum), TestEnum.Ten, null).ShouldBeEquivalentTo(false);
            vc.ConvertBack(value, typeof(TestEnum), TestEnum.Two, null).ShouldBeEquivalentTo(TestEnum.Eight);
		}
	}";		
}
#>